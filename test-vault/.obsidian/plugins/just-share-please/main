/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  default: () => JustSharePleasePlugin
});
var import_obsidian2 = __toModule(require("obsidian"));

// src/settings.ts
var defaultSettings = {
  url: "http://localhost:8080",
  shared: []
};

// src/settings-tab.ts
var import_obsidian = __toModule(require("obsidian"));
var JSPSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    this.containerEl.empty();
    this.containerEl.createEl("h2", { text: "Just Share Please Settings" });
    this.containerEl.createEl("hr");
    this.containerEl.createEl("p", { text: "If you like this plugin and want to support its development, you can do so through my website by clicking this fancy image!" });
    this.containerEl.createEl("a", { href: "https://ellpeck.de/support" }).createEl("img", {
      attr: { src: "https://ellpeck.de/res/generalsupport.png" },
      cls: "just-share-please-support"
    });
  }
};

// src/main.ts
var JustSharePleasePlugin = class extends import_obsidian2.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addSettingTab(new JSPSettingsTab(this.app, this));
      this.registerEvent(this.app.workspace.on("file-menu", (m, f) => __async(this, null, function* () {
        if (f instanceof import_obsidian2.TFile) {
          let shared = this.settings.shared.find((i) => i.path == f.path);
          if (!shared) {
            m.addItem((i) => {
              i.setTitle("Share to JSP");
              i.setIcon("share");
              i.onClick(() => __async(this, null, function* () {
                let response = yield (0, import_obsidian2.requestUrl)({
                  url: `${this.settings.url}/share.php`,
                  method: "POST",
                  body: JSON.stringify({ content: yield this.app.vault.cachedRead(f) }),
                  throw: false
                });
                console.log(response.status + " " + response.text);
                if (response.status == 200) {
                  shared = response.json;
                  shared.path = f.path;
                  this.settings.shared.push(shared);
                  yield this.saveSettings();
                }
              }));
            });
          } else {
            m.addItem((i) => {
              i.setTitle("Copy JSP link");
              i.setIcon("link");
              i.onClick(() => navigator.clipboard.writeText(`${this.settings.url}#${shared.id}`));
            });
            m.addItem((i) => {
              i.setTitle("Update in JSP");
              i.setIcon("share");
              i.onClick(() => __async(this, null, function* () {
                let response = yield (0, import_obsidian2.requestUrl)({
                  url: `${this.settings.url}/share.php?id=${shared.id}`,
                  method: "PATCH",
                  headers: { "Password": shared.password },
                  body: JSON.stringify({ content: yield this.app.vault.cachedRead(f) }),
                  throw: false
                });
                console.log(response.status + " " + response.text);
              }));
            });
            m.addItem((i) => {
              i.setTitle("Delete from JSP");
              i.setIcon("trash");
              i.onClick(() => __async(this, null, function* () {
                let response = yield (0, import_obsidian2.requestUrl)({
                  url: `${this.settings.url}/share.php?id=${shared.id}`,
                  method: "DELETE",
                  headers: { "Password": shared.password },
                  throw: false
                });
                console.log(response.status);
                if (response.status == 200) {
                  this.settings.shared.remove(shared);
                  yield this.saveSettings();
                }
              }));
            });
          }
        }
      })));
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, defaultSettings, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
